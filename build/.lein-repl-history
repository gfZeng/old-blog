javadoc
(javadoc java.io.File)
(require '[java.io.shell :as sh])
(require '[clojure.java.shell :as sh])
(sh/ls "*")
(sh/sh ["ls"])
(sh/sh "ls")
(doc sh/sh)
(sh/sh "ls" "*")
(sh/sh "ls" "*" )
(use hiccup.core)
(use 'hiccup.core)
(as-hiccup (parse "<a></a>")
)
as-hiccup
parse
(use 'hiccup.core)
as-hiccup
parse
(require '[hiccup.core :as h])
(require '[hicktory.core :as h])
(require '[hickory.core :as h])
(require '[hickory.core :as hk])
(use 'hickory.core)
(as-hiccup (parse "<a></a>")
)
(as-hiccup (parse "<a></a>"))
(as-hiccup (parse (slurp "html/default.html"))
)
(as-hickory (parse (slurp "html/default.html"))
)
(as-hiccup (parse-fragment (slurp "html/default.html")))
(as-hickory (parse (slurp "html/default.html")))
(as-hiccup (parse (slurp "html/default.html")))
(second (as-hiccup (parse (slurp "html/default.html"))))
(clojure.pprint/pprint (second (as-hiccup (parse (slurp "html/default.html")))))
(second (as-hiccup (parse (slurp "html/default.html"))))
(def data *1)
data
(clojure.pprint/pprint (second (as-hiccup (parse (slurp "tmp.html")))))
(use 'compojure.core)
(html [:a])
(html (doctype :html5) [:a])
(read-string "(+ a 1))

"))
(read-string "(+ a 1)")
(let [a 1] (eval (read-string "(+ a 1)"))
)
(let [a 1] (eval (read-string "(+ a 1)")))
(eval `(let ['a 1] (read-string "(+ a 1)")))
(eval `(let ['a 1] ~(read-string "(+ a 1)")))
(eval `(let [a 1] ~(read-string "(+ a 1)")))
(eval `(let ['a 1] ~(read-string "(+ a 1)")))
(eval `(let [~'a 1] ~(read-string "(+ a 1)")))
(eval `(let [~'a 1] (read-string "(+ a 1)")))
(eval `(let [~'a 1] ~(read-string "(+ a 1)")))
(eval `(let [~'a 1] ~(read-string "(+ a 1) (+ a 2)")))
(read-string "(+ 1 2) (+ a 3)")
(eval `(let [~'a 1] ~(read-string "(+ a 1) (+ a 2)")))
(keys [1 23 3])
(kes {:a 3 :b 4}
)
(keys {:a 3 :b 4})
(> 3 4)
(> :a :b)
(sort > ["a", "3"])
(sort > ["a" "3"])
(> "a", "3")
(compare "3" "2")
(compare :a :b)
(max-key key {:a 3 :b 4})
(max-key key (seq {:a 3 :b 4}))
(max-key key {1 2 2 3})
(max-key key (seq {1 2 2 3}))
(apply max-key key {1 2 2 3})
(apply max-key key {:a 3 :b 4})
